{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$comment": "This schema for app.config.json",
  "type": "object",
  "additionalProperties": true,
  "properties": {
    "Author": {
      "type": "string",
      "minLength": 1,
      "required": [ "Safe Online World Ltd." ],
      "const": "Safe Online World Ltd.",
      "default": "Safe Online World Ltd.",
      "description": "cwserver Author Name"
    },
    "appName": {
      "type": "string",
      "minLength": 1,
      "default": "cwserver",
      "description": "Your App name"
    },
    "version": {
      "type": "string",
      "minLength": 1,
      "default": "0.0.1",
      "description": "This is your app version"
    },
    "packageVersion": {
      "type": "string",
      "minLength": 1,
      "default": "1",
      "description": "You may use it static file version like as myfile.css?v= {= server.config.version =}"
    },
    "isDebug": {
      "type": "boolean",
      "minLength": 1,
      "default": true,
      "enum": [ true, false ],
      "description": "If  isDebug true then all process information will be dump in both of console and app log file "
    },
    "template": {
      "type": "object",
      "description": "Template engine",
      "minLength": 1,
      "default": {
        "cache": true,
        "cacheType": "FILE",
        "ext": [ ]
      },
      "properties": {
        "cache": {
          "type": "boolean",
          "minLength": 1,
          "default": true,
          "enum": [ true, false ],
          "description": "if templateCache true, than if any template file has changed, than, it will be recompailed. Else, run from server cached file or memmory."
        },
        "cacheType": {
          "type": "string",
          "minLength": 1,
          "default": "FILE",
          "enum": [ "FILE", "MEM" ],
          "description": "You can set template cache mood FILE | MEM. It will be effect while template.cache is true"
        },
        "ext": {
          "type": "array",
          "minLength": 0,
          "default": [],
          "description": "Will be transfile give extension. e.g. ['html', 'wjsx']"
        }
      }
    },
    "encryptionKey": {
      "type": "string",
      "minLength": 5,
      "default": "",
      "description": "This encryption key will be used _server.encryption.*.*"
    },
    "socketPath": {
      "type": "string",
      "minLength": 0,
      "default": "",
      "description": "While you use const {socketInitilizer} = require('cwserver');"
    },
    "staticFile": {
      "type": "object",
      "minLength": 1,
      "default": {
        "fileCache": true,
        "compression": true,
        "minCompressionSize": 0
      },
      "description": "Static file config",
      "properties": {
        "fileCache": {
          "type": "boolean",
          "minLength": 1,
          "default": true,
          "enum": [ true, false ],
          "description": "Effected if compression is true; If fileCache true, then static file served from gzip cached file"
        },
        "compression": {
          "type": "boolean",
          "minLength": 1,
          "default": true,
          "enum": [ true, false ],
          "description": "Static file compression is true then compress static file with zlib"
        },
        "minCompressionSize": {
          "type": "number",
          "minLength": 1,
          "default": 0,
          "description": "If minCompressionSize = 0 then all static file will be compress or compress > minCompressionSize"
        }
      }
    },
    "cacheHeader": {
      "type": "object",
      "description": "Static file browser cache header",
      "minLength": 1,
      "default": {
        "maxAge": "7d",
        "serverRevalidate": true
      },
      "properties": {
        "maxAge": {
          "type": "string",
          "minLength": 2,
          "default": "7d",
          "description": "maxAge = mm = Month | d = Day | h = Hour | m = Minute."
        },
        "serverRevalidate": {
          "type": "boolean",
          "minLength": 1,
          "default": true,
          "enum": [ true, false ],
          "description": "If serverRevalidate true then before served from browser cache, browser should be revalidate from server"
        }
      }
    },
    "liveStream": {
      "type": "array",
      "minLength": 0,
      "default": [],
      "items": {
        "type": "string"
      },
      "description": "Static file can be stream if browser support or sent range header"
    },
    "defaultDoc": {
      "type": "array",
      "minLength": 1,
      "default": [ "index", "default" ],
      "items": {
        "type": "string"
      },
      "description": "Default document of Array. e.g. [\"index\", \"default\"]; If you've config.defaultExt you dont need extension here..."
    },
    "noCache": {
      "type": "array",
      "minLength": 0,
      "default": [],
      "items": {
        "type": "string"
      },
      "description": "Given Static file should not served from server cache"
    },
    "session": {
      "type": "object",
      "minLength": 1,
      "default": {
        "cookie": "_session",
        "maxAge": "1d",
        "key": "abc$#123",
        "isSecure": false
      },
      "description": "Effect on server.setSession",
      "properties": {
        "cookie": {
          "type": "string",
          "minLength": 1,
          "default": "_session",
          "description": "Session cookie name"
        },
        "maxAge": {
          "type": "string",
          "minLength": 2,
          "default": "7d",
          "description": "maxAge = mm = Month | d = Day | h = Hour | m = Minute."
        },
        "key": {
          "type": "string",
          "minLength": 1,
          "default": "abc$#123",
          "description": "This encryption key will be use session cookie encryption"
        },
        "isSecure": {
          "type": "boolean",
          "minLength": 1,
          "default": false,
          "enum": [ true, false ],
          "description": "Session cookie send for secure connections"
        }
      }
    },
    "mimeType": {
      "type": "array",
      "minLength": 0,
      "default": [ "css", "js", "png", "gif", "ico", "map", "mp3", "mp4", "pdf" ],
      "items": {
        "type": "string"
      },
      "description": "Define here which mim type your apps are supported"
    },
    "defaultExt": {
      "type": "string",
      "minLength": 0,
      "default": ".html",
      "description": "Your apps default file extension. If you set it .html or any. Suppose, your apps have /auth/login.html file extension, then this route should be /auth/login else return 404"
    },
    "bundler": {
      "type": "object",
      "minLength": 1,
      "description": "Static file css and js file bundler. It will use config.cacheHeader.\r\nHow to use ?\r\nIn your html or defaultExt file in script or css tag \r\nadd src/href=\"/app/api/bundle/?g={= _server.createBundle(`$root/$public/static/script/one_way_broadcast.js|__owner__`) =}&ck=index_html&ct=text/javascript&rc=Y\"",
      "default": {
        "enable": true,
        "fileCache": true,
        "route": "/app/api/bundle/",
        "compress": true
      },
      "properties": {
        "enable": {
          "type": "boolean",
          "minLength": 1,
          "default": true,
          "enum": [ true, false ],
          "description": "If enable then you can use _server.createBundle"
        },
        "fileCache": {
          "type": "boolean",
          "minLength": 1,
          "default": true,
          "enum": [ true, false ],
          "description": "If file chache, then served form server file cache, If any bundled file were not modified"
        },
        "route": {
          "type": "string",
          "minLength": 2,
          "default": "/app/api/bundle/",
          "description": "Define bundler route"
        },
        "compress": {
          "type": "boolean",
          "minLength": 1,
          "default": true,
          "enum": [ true, false ],
          "description": "If bundler support compress.\r\nIf change this from previous state,\r\nplease clean $public\\web\\temp\\ folder"
        }
      }
    },
    "views": {
      "type": "array",
      "minLength": 0,
      "default": [],
      "items": {
        "type": "string"
      },
      "description": "All of your apps views\r\n$root = your application root __dirname\r\n$public = config.hostInfo.root"
    },
    "errorPage": {
      "type": "object",
      "description": "Application error page. If you set errorPage = {} then error page served from cwserver\r\nYou can use it from your template file or views like as ctx.next(404);\r\n$root = your application root __dirname\r\n$public = config.hostInfo.root",
      "default": {
        "404": "$root/$public/error_page/404.html",
        "401": "$root/$public/error_page/401.html",
        "500": "$root/$public/error_page/500.html"
      },
      "properties": {}
    },
    "hiddenDirectory": {
      "type": "array",
      "minLength": 0,
      "default": [],
      "items": {
        "type": "string"
      },
      "description": "This folder will be reserved\r\nRouter return 404 if match"
    },
    "hostInfo": {
      "type": "object",
      "description": "Application host information",
      "default": {
        "origin": [],
        "root": "www",
        "hostName": "",
        "frameAncestors": "",
        "tls": false,
        "cert": {},
        "port": 8080
      },
      "properties": {
        "origin": {
          "type": "array",
          "minLength": 0,
          "default": [],
          "description": "Supported origin"
        },
        "root": {
          "type": "string",
          "minLength": 2,
          "default": "www",
          "description": "Application public directory name"
        },
        "hostName": {
          "type": "string",
          "minLength": 0,
          "default": "localhost",
          "description": "Application host name"
        },
        "frameAncestors": {
          "type": "string",
          "minLength": 0,
          "default": "",
          "description": "content-security-policy: frame-ancestors hostInfo.frameAncestors"
        },
        "tls": {
          "type": "boolean",
          "minLength": 1,
          "default": true,
          "enum": [ true, false ],
          "description": "Is supported TLS (Transport Layer Security)"
        },
        "cert": {
          "type": "object",
          "minLength": 0,
          "default": {},
          "description": "app ssl certificate information."
        },
        "port": {
          "type": "number",
          "minLength": 1,
          "default": 8080,
          "description": "Which port you like to open, while not using pipe moo"
        }
      }
    },
    "database": {
      "type": "array",
      "description": "{\nmodule: string; // this is your database module name. server.db.pg.executeIo()\npath: string; // this is your database module path and it should be return ISowDatabaseType = require( database.path )\ndbConn: { database: string, password: string };\n}",
      "minLength": 0,
      "default": [
        {
          "module": "",
          "path": "",
          "dbConn": {
            "database": "",
            "password": ""
          }
        }
      ],
      "items": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "module": {
            "type": "string",
            "minLength": 1,
            "default": "",
            "description": "this is your database module name. server.db.pg.executeIo()"
          },
          "path": {
            "type": "string",
            "minLength": 1,
            "default": "",
            "description": "this is your database module path and it should be return ISowDatabaseType = require( database.path )"
          },
          "dbConn": {
            "type": "object",
            "minLength": 0,
            "default": {
              "host": "localhost",
              "port": 5432,
              "user": "postgres",
              "database": "",
              "password": ""
            },
            "description": "Database connection information.",
            "properties": {
              "user": {
                "type": "string",
                "minLength": 0,
                "default": "postgres",
                "description": "Database user"
              },
              "host": {
                "type": "string",
                "minLength": 0,
                "default": "localhost",
                "description": "Database host"
              },
              "port": {
                "type": "number",
                "minLength": 0,
                "default": 5432,
                "description": "Database port"
              },
              "database": {
                "type": "string",
                "minLength": 1,
                "default": "",
                "description": "Database name"
              },
              "password": {
                "type": "string",
                "minLength": 1,
                "default": "",
                "description": "Database password"
              }
            }
          }
        }
      }
    }
  }
}